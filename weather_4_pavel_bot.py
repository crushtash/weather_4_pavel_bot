import os
import logging
import requests
import schedule
import time
from datetime import datetime
from telegram import Bot, Update
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters
from telegram.utils.request import Request

# üîê –¢–í–û–ò –ö–õ–Æ–ß–ò
BOT_TOKEN = os.getenv('BOT_TOKEN')
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
LATITUDE = 55.7734
LONGITUDE = 37.6218

# chat_id ‚Äî –í–°–¢–ê–í–¨ –°–í–û–ò
PASHAS_CHAT_ID = int(os.getenv('PASHAS_CHAT_ID'))
YOUR_CHAT_ID = int(os.getenv(''YOUR_CHAT_ID''))
# üì° Telegram –±–æ—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
request = Request(connect_timeout=5, read_timeout=10)
bot = Bot(token=BOT_TOKEN, request=request)

# üíå –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_TEXT = (
"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π –¥–æ—Ä–æ–≥–æ–π, –ª—é–±–∏–º—ã–π + –Ω–µ–Ω–∞–≥–ª—è–¥–Ω—ã–π –ü–∞–≤–µ–ª. –Ø - –º–∞–ª–µ–Ω—å–∫–∞—è —á–∞—Å—Ç–∏—á–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ –ù–∞—Ç–∞—à–∏ –°–æ–∫–æ–ª–æ–≤–æ–π, –æ–±–ª–∞–¥–∞—é—â–∞—è –Ω–∞–≤—ã–∫–∞–º–∏ —Å–∏–Ω–æ–ø—Ç–∏–∫–∞, —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ 4 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (11:00, 14:00, 18:00, 23:00), —Ç–µ–±–µ —Å–∞–º–æ–º—É –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –ù–µ –∑–Ω–∞—é, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è —Ç–µ–±—è –æ–∫–∞–∂–µ—Ç—Å—è —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å... –ø–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ, –ø—É—Å—Ç—å —ç—Ç–æ —Å–ª—É–∂–∏—Ç –º–∞–ª–µ–Ω—å–∫–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –º–æ–µ–π —Ö–æ–∑—è–π–∫–∏ –∏ –æ —Ç–æ–º, —á—Ç–æ –æ–Ω–∞ –¥—É–º–∞–µ—Ç –æ —Ç–µ–±–µ –∫–∞–∂–¥—É—é —Å–≤–æ–±–æ–¥–Ω—É—é –º–∏–Ω—É—Ç—É (—Ç–æ –µ—Å—Ç—å –≤—Å–µ –º–∏–Ω—É—Ç—ã –≤—Å–µ—Ö –¥–Ω–µ–π). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥—Ä—É–≥–∞—è —á–∞—Å—Ç–∏—á–∫–∞ –ù–∞—Ç–∞—à–∏, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –ø—Ä–æ–≥—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–≥–ª–∞ –≤–Ω–µ—Å—Ç–∏ —Ç–≤–æ–π id –≤ –∫–æ–¥ –¥–ª—è –º–æ–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã. –ü—Ä–æ–≥–Ω–æ–∑—ã –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."
)

# üß† –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
def get_comment(temp_c, condition, feels_like):
    if "–¥–æ–∂–¥" in condition.lower():
        return "–¥–æ—Ä–æ–≥–æ–π –ü–∞—à–∞, –Ω–µ –∑–∞–±—É–¥—å –¥–æ–∂–¥–µ–≤–∏—á–æ–∫ (–ø–æ–ª–æ–∂–∏ –≤ —Å—É–º–æ—á–∫—É), –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–∂–¥—å!!! —Ü–µ–ª—É—é"
    elif temp_c <= 10:
        return "–¥–æ—Ä–æ–≥–æ–π –ü–∞—à–∞, –Ω–∞ —É–ª–∏—Ü–µ –ø—Ä–æ—Ö–ª–∞–¥–Ω–µ–π –æ–±—ã—á–Ω–æ–≥–æ, —Ö–æ—Ç—å —Ç—ã –∏ –ª—é–±–∏—à—å –º–µ—Ä–∑–Ω—É—Ç—å, –Ω–µ –∑–∞–±—É–¥—å —É—Ç–µ–ø–ª–∏—Ç—å—Å—è!! —Ü–µ–ª—É—é"
    elif temp_c >= 25:
        return "–î–û–†–û–ì–û–ô –ü–ê–®–ê! –¢–†–ï–í–û–ì–ê, –ü–û–¢–ï–ù–ò–ï!!!!! –Ω–∞–¥–µ–Ω—å —Ñ—É—Ç–±–æ–ª–∫—É –∏ –ø–µ–π –±–æ–ª—å—à–µ –≤–æ–¥—ã!! —Ü–µ–ª—É—é"
    else:
        return "–¥–æ—Ä–æ–≥–æ–π –ü–∞—à–∞, –ø–æ–≥–æ–¥–∞ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è!!! (–≤—Ä–æ–¥–µ), –æ–¥–µ–≤–∞–π—Å—è, –∫–∞–∫ –æ–±—ã—á–Ω–æ. —Ü–µ–ª—É—é!!"

# ‚òÅ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
def get_weather_data(forecast_tomorrow=False):
    url = f'https://api.weather.yandex.ru/v2/forecast?lat={LATITUDE}&lon={LONGITUDE}&lang=ru_RU&hours=true&limit=2'
    headers = {"X-Yandex-API-Key": YANDEX_API_KEY}
    try:
        response = requests.get(url, headers=headers)
        data = response.json()
        if forecast_tomorrow:
            day = data['forecasts'][1]['parts']['day']
        else:
            day = data['fact']
        temp = day['temp']
        feels_like = day['feels_like']
        condition = day['condition']
        wind_speed = day.get('wind_speed', '‚Äî')
        humidity = day.get('humidity', '‚Äî')
        precip = day.get('prec_mm', 0)
        precip_prob = day.get('prec_prob', '‚Äî') if forecast_tomorrow else '‚Äî'
        return temp, feels_like, condition, wind_speed, humidity, precip, precip_prob, data
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã:", e)
        return None

# üïí –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã
def get_hourly_forecast(forecast_data, hours_ahead):
    now = datetime.now()
    current_hour = now.hour
    hourly_list = forecast_data['forecasts'][0]['hours']
    upcoming = [h for h in hourly_list if current_hour < int(h['hour']) <= current_hour + hours_ahead]

    if not upcoming:
        return "üìÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–ª–∏–∂–∞–π—à–∏—Ö —á–∞—Å–∞—Ö."

    result = "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã:\n"
    for h in upcoming:
        hour = h['hour']
        temp = h['temp']
        feels = h['feels_like']
        wind = h['wind_speed']
        condition = h['condition']
        prec = h.get('prec_mm', 0)
        cond_text = "—Å—É—Ö–æ" if prec == 0 else f"–¥–æ–∂–¥—å ({prec} –º–º)"
        result += f"‚Ä¢ {hour}:00 ‚Äî {temp}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels}¬∞C, {cond_text}, –≤–µ—Ç–µ—Ä {wind} –º/—Å\n"

    return result

# üíå –ü—Ä–æ–≥–Ω–æ–∑ + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π + –ø–æ—á–∞—Å–æ–≤–æ–π
def send_weather_message(time_label):
    hours_ahead_map = {"11:00": 3, "14:00": 4, "18:00": 5}
    hours_ahead = hours_ahead_map.get(time_label, 0)

    weather = get_weather_data()
    if not weather:
        print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")
        return

    temp, feels_like, condition, wind_speed, humidity, precip, precip_prob, data = weather
    comment = get_comment(temp, condition, feels_like)

    intro = {
        "11:00": "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —É—Å–ª–∞–¥–∞ –º–æ–∏—Ö –≥–ª–∞–∑!",
        "14:00": "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, –º–æ–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ! –ù–µ –∑–∞–±—É–¥—å –ø–æ–æ–±–µ–¥–∞—Ç—å!",
        "18:00": "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, –∂–æ–ø–∫–∞!"
    }.get(time_label, "")

    message = f"""{intro}

{comment}

–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C
–û—Å–∞–¥–∫–∏: {precip_prob}% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, {precip} –º–º
–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å
–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%
"""

    if hours_ahead:
        message += "\n" + get_hourly_forecast(data, hours_ahead)

    for user_id in [PASHAS_CHAT_ID, YOUR_CHAT_ID]:
        if user_id:
            bot.send_message(chat_id=user_id, text=message)

# üåô –ù–æ—á–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑ (–Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
def send_night_forecast():
    weather = get_weather_data(forecast_tomorrow=True)
    if not weather:
        print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
        return

    temp, feels_like, condition, wind_speed, humidity, precip, precip_prob, _ = weather

    message = f"""üåô –ó–∞–≤—Ç—Ä–∞—à–Ω—è—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ:

–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C
–û—Å–∞–¥–∫–∏: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {precip_prob}%, {precip} –º–º
–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å
–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%

–ü—Ä–∏—è—Ç–Ω—ã—Ö —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–π, –ü–∞—à–∞. –¶–µ–ª—É—é –≤ –ø—Ä–∞–≤—ã–π –∏ –ª–µ–≤—ã–π –≥–ª–∞–∑–∏–∫."""

    for user_id in [PASHAS_CHAT_ID, YOUR_CHAT_ID]:
        if user_id:
            bot.send_message(chat_id=user_id, text=message)

# ‚úÖ –ö–æ–º–∞–Ω–¥—ã
def test_command(update: Update, context: CallbackContext):
    if update.effective_chat.id in [PASHAS_CHAT_ID, YOUR_CHAT_ID]:
        send_weather_message("14:00") # –¥–ª—è —Ç–µ—Å—Ç–∞

def start_command(update: Update, context: CallbackContext):
    if update.effective_chat.id == PASHAS_CHAT_ID:
        bot.send_message(chat_id=PASHAS_CHAT_ID, text=WELCOME_TEXT)

# üîé –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å chat_id –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
def echo_id(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    user_name = update.effective_user.first_name
    print(f"‚û§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} ‚Äî chat_id: {user_id}")

# üïì –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
def setup_schedules():
    schedule.every().day.at("11:00").do(send_weather_message, "11:00")
    schedule.every().day.at("14:00").do(send_weather_message, "14:00")
    schedule.every().day.at("18:00").do(send_weather_message, "18:00")
    schedule.every().day.at("23:00").do(send_night_forecast)

# üöÄ –ó–∞–ø—É—Å–∫
def main():
    global PASHAS_CHAT_ID, YOUR_CHAT_ID

    print("‚ö° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É –≤ Telegram, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å chat_id.")

    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start_command))
    dp.add_handler(CommandHandler("test", test_command))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, echo_id))
    updater.start_polling()

    setup_schedules()
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    main()
